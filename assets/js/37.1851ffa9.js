(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{482:function(t,e,r){"use strict";r.r(e);var a=r(1),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("blockquote",[r("p",[t._v("前端面试题")])]),t._v(" "),r("h2",{attrs:{id:"_1、请使用css代码编写实现颜色为-rgba-0-0-0-0-的三角形图标"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、请使用css代码编写实现颜色为-rgba-0-0-0-0-的三角形图标"}},[t._v("#")]),t._v(" 1、请使用css代码编写实现颜色为 rgba(0,0,0,0) 的三角形图标")]),t._v(" "),r("p",[t._v("答：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v(".triangle {\n    width: 0;\n    height: 0;\n    border: 100px solid rgba(0,0,0,0);\n    border-bottom-color: rgba(0,0,0,1);\n}\n")])])]),r("h2",{attrs:{id:"_2、请编写代码使下列html代码实现checkbox的全选和反选"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、请编写代码使下列html代码实现checkbox的全选和反选"}},[t._v("#")]),t._v(" 2、请编写代码使下列HTML代码实现Checkbox的全选和反选")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('    <button id="other">反选</button>\n    <input type="checkbox" id="all" />全选\n    <input type="checkbox" class="check" />1\n    <input type="checkbox" class="check" />2\n    <input type="checkbox" class="check" />3\n')])])]),r("p",[t._v("答：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("    var other = document.getElementById('other');\n    var all = document.getElementById('all');\n    var checkList = document.getElementsByClassName('check')\n    \x3c!-- 反选 --\x3e\n    other.onclick = function () {\n        for (var i = 0; i < checkList.length; i++) {\n            checkList[i].checked = !checkList[i].checked\n        }\n    }\n    \x3c!-- 全选 --\x3e\n    all.onchange = function () {\n        for (var i = 0; i < checkList.length; i++) {\n            if (this.checked) {\n                checkList[i].checked = true\n            } else {\n                checkList[i].checked = false\n            }\n        }\n    }\n")])])]),r("h2",{attrs:{id:"_3、请写出使用函数节流和函数防抖的含义及实现方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3、请写出使用函数节流和函数防抖的含义及实现方法"}},[t._v("#")]),t._v(" 3、请写出使用函数节流和函数防抖的含义及实现方法")]),t._v(" "),r("p",[t._v("答：")]),t._v(" "),r("p",[t._v("函数节流：高频事件触发，在N秒内只会执行一次，所以节流会稀释函数的执行频率")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("function throttle(fn, delay=1000) {\n    var timer = null;\n    return function() {\n        if(!timer) {\n            timer = setTimeout(function(){\n                timer = null\n                fn.apply(this, arguments)\n            }, delay)\n        }\n    }\n}\n")])])]),r("p",[t._v("函数防抖：触发高频事件后N秒内函数只会执行一次，如果N秒内高频事件再次呗触发，则重新计算时间")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("function debounce(fn, delay=1000) {\n    var timer = null;\n    return function() {\n        clearTimeout(timer)\n        timer = setTimeout(function() {\n            fn.apply(this, arguments)\n        }, delay)\n    }\n}\n")])])]),r("h2",{attrs:{id:"_4、请手动编写实现js数组自带map及filter方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4、请手动编写实现js数组自带map及filter方法"}},[t._v("#")]),t._v(" 4、请手动编写实现JS数组自带map及filter方法")]),t._v(" "),r("p",[t._v("答：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("\x3c!-- filter 方法 --\x3e\nArray.prototype.filter = function(fn, thisArg) {\n    if(Object.prototype.toString.call(fn) !== '[Object Function]') {\n        throw new TypeError(fn + 'is not a function')\n    }\n    var arr = [];\n    for(var i = 0; i < this.length; i++){\n        fn.call(thisArg, this[i], i, this) && arr.push(this[i])\n    }\n    return arr\n}\n\n\x3c!-- map 方法 --\x3e\nArray.prototype.map = function(fn, thisArg) {\n    if(Object.prototype.toString.call(fn) !== '[Object Function]') {\n        throw new TypeError(fn + 'is not a function')\n    }\n    var arr = [];\n    for(var i = 0; i < this.length; i++){\n        arr.push(fn.call(thisArg, this[i], i, this))\n    }\n    return arr\n}\n")])])]),r("h2",{attrs:{id:"_5、已知三维数组-1-2-1-null-1-nan-a-null-2-underfind-，请编写代码实现将所有元素去重后合并到一个一维数组"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5、已知三维数组-1-2-1-null-1-nan-a-null-2-underfind-，请编写代码实现将所有元素去重后合并到一个一维数组"}},[t._v("#")]),t._v(' 5、已知三维数组[[[1,2],1,null,"",{},[1,NaN]],["a",null,2],underfind]，请编写代码实现将所有元素去重后合并到一个一维数组')]),t._v(" "),r("p",[t._v("答:")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("\x3c!-- 递归方法 --\x3e\nlet newArr = []\nfunction arrConversion(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        console.log(Array.isArray(arr[i]))\n        if (Array.isArray(arr[i])) {\n            arrConversion(arr[i])\n        } else {\n            if (newArr.indexOf(arr[i]) < 0) {\n                newArr.push(arr[i])\n            }\n        }\n    }\n}\nreturn newArr\n")])])]),r("h2",{attrs:{id:"_6、请写出vue实例的部分生命周期方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6、请写出vue实例的部分生命周期方法"}},[t._v("#")]),t._v(" 6、请写出Vue实例的部分生命周期方法")]),t._v(" "),r("p",[t._v("答：")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("初始化阶段：")]),t._v(" "),r("p",[t._v("beforeCreate() "),r("strong",[t._v("(创建前)")]),t._v(" 实例开始初始化时同步调用，此时数据观测、事件等都尚未初始化")]),t._v(" "),r("p",[t._v("created() "),r("strong",[t._v("(创建后)")]),t._v(" 在实例创建之后调用。此时已经完成数据观测、事件方法，但尚未开始DOM编译，即未挂载到document中")])]),t._v(" "),r("li",[r("p",[t._v("挂载阶段:")]),t._v(" "),r("p",[t._v("beforeMount() "),r("strong",[t._v("载入前")]),t._v(" 在mounted之前运行，此时页面呈现的是未经vue编译的DOM结构，所有对DOM的操作，最终都不奏效")]),t._v(" "),r("p",[t._v("mounted() "),r("strong",[t._v("载入后")]),t._v(" 在编译结束时调用。此时所有指令已生效，数据变化能触发DOM更新，但不能保证$el已插入文档")])]),t._v(" "),r("li",[r("p",[t._v("更新阶段:")]),t._v(" "),r("p",[t._v("beforeUpdate() "),r("strong",[t._v("更新前")]),t._v(" 在实例挂载之后，再次更新实例（例如更新data）时会调用该方法，此时尚未更新")]),t._v(" "),r("p",[t._v("updated()   "),r("strong",[t._v("更新后")]),t._v(" 在实例挂载之后，再次更新实例并在更新完DOM结构之后调用")])]),t._v(" "),r("li",[r("p",[t._v("销毁阶段:")]),t._v(" "),r("p",[t._v("beforeDestory() "),r("strong",[t._v("销毁前")]),t._v(" 开始销毁实例时调用，此时实例仍有效")]),t._v(" "),r("p",[t._v("destoryed() "),r("strong",[t._v("销毁吼")]),t._v(" 在实例销毁之后调用，此时所有绑定和实例指令都已解绑，子实例也被销毁")])])]),t._v(" "),r("h2",{attrs:{id:"_7、请说出vue父组件传递参数到子组件，子组件传递参数到父组件，兄弟组件之间传递参数，祖孙组件传递参数的方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7、请说出vue父组件传递参数到子组件，子组件传递参数到父组件，兄弟组件之间传递参数，祖孙组件传递参数的方法"}},[t._v("#")]),t._v(" 7、请说出Vue父组件传递参数到子组件，子组件传递参数到父组件，兄弟组件之间传递参数，祖孙组件传递参数的方法")]),t._v(" "),r("p",[t._v("答：")]),t._v(" "),r("h4",{attrs:{id:"props-emit-（父子组件之间传值）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#props-emit-（父子组件之间传值）"}},[t._v("#")]),t._v(" props / $emit  （父子组件之间传值）")]),t._v(" "),r("p",[t._v("props 父组件传值给子组件")]),t._v(" "),r("p",[t._v("$emit 子组件传值给父组件")]),t._v(" "),r("h4",{attrs:{id:"attrs-listeners-（祖孙之间传值）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#attrs-listeners-（祖孙之间传值）"}},[t._v("#")]),t._v(" $attrs / $listeners    （祖孙之间传值）")]),t._v(" "),r("p",[t._v('$attrs：包含了父作用域中不被 Prop 所识别的特性绑定（class 和 style 除外），当一个组件没有申明任何 prop 时，这里会包含所有父作用域的绑定（class 和 style 除外），并且可以通过 v-bind="$attrs" 传入内部组件')]),t._v(" "),r("p",[t._v('$listeners：包含了父作用域中的 v-on 事件监听器（不包含 .native 修饰器的），可以通过 v-on="$listeners" 传入内部组件')]),t._v(" "),r("h4",{attrs:{id:"provide-inject-（只能用于父传子，反向不能传递）此时传递的数据，不是响应式的"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#provide-inject-（只能用于父传子，反向不能传递）此时传递的数据，不是响应式的"}},[t._v("#")]),t._v(" provide / inject （只能用于父传子，反向不能传递）此时传递的数据，不是响应式的")]),t._v(" "),r("p",[t._v("provide 在祖先中提供变量")]),t._v(" "),r("p",[t._v("inject 在后代中注入变量")]),t._v(" "),r("h4",{attrs:{id:"parent-children-（父子组件之间传值）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#parent-children-（父子组件之间传值）"}},[t._v("#")]),t._v(" $parent / $children    （父子组件之间传值）")]),t._v(" "),r("p",[t._v("$parent 访问父实例")]),t._v(" "),r("p",[t._v("$children 访问子实例")]),t._v(" "),r("h4",{attrs:{id:"事件总线-eventbus-，-emit-on-（任意传值）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#事件总线-eventbus-，-emit-on-（任意传值）"}},[t._v("#")]),t._v(" 事件总线 eventbus ，$emit / $on （任意传值）")]),t._v(" "),r("h4",{attrs:{id:"root-（获取根组件）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#root-（获取根组件）"}},[t._v("#")]),t._v(" $root （获取根组件）")]),t._v(" "),r("p",[t._v("$root 获取当前 vue 组件的根组件实例。")]),t._v(" "),r("p",[t._v("当兄弟组件之间传值，或者是跨层级传值时，可以将数据挂载到根实例上，然后其他组件从根实例上获取。")]),t._v(" "),r("h4",{attrs:{id:"ref-（访问子组件）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#ref-（访问子组件）"}},[t._v("#")]),t._v(" ref  （访问子组件）")]),t._v(" "),r("p",[t._v("如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例。")]),t._v(" "),r("p",[t._v("给子组件添加 ref ，在父组件中可以通过 this.$refs.['设置的名称'] 访问子组件实例。")]),t._v(" "),r("h4",{attrs:{id:"vuex-（任意传值）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#vuex-（任意传值）"}},[t._v("#")]),t._v(" vuex （任意传值）")]),t._v(" "),r("p",[t._v("vuex 实现数据共享")]),t._v(" "),r("h2",{attrs:{id:"_8、已知项目中有-teacher-user-和-student-user-两种身份角色且存储在vuex变量中，请编写vue如v-permission-teacher-user-student-user-的自定义指令实现页面中按钮以及菜单的动态权限处理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_8、已知项目中有-teacher-user-和-student-user-两种身份角色且存储在vuex变量中，请编写vue如v-permission-teacher-user-student-user-的自定义指令实现页面中按钮以及菜单的动态权限处理"}},[t._v("#")]),t._v(' 8、已知项目中有 TEACHER_USER 和 STUDENT_USER 两种身份角色且存储在Vuex变量中，请编写VUE如v-permission="[TEACHER_USER, STUDENT_USER]"的自定义指令实现页面中按钮以及菜单的动态权限处理')]),t._v(" "),r("p",[t._v("答：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("Vue.directive('permission', function(el,bindling) {\n\n})\n")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);